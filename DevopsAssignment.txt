Building a multi-container application typically involves using containerization technologies like Docker and orchestrators like Docker Compose.
In this example, I'll guide you through creating a simple multi-container application with three containers: a frontend web application, a 
backend API, and a database.
 
(1)Create Project Directory:-Start by creating a new directory for your project:
root@Dockerhost:~# mkdir multi-container-app
root@Dockerhost:~# cd multi-container-app

(2)Create Dockerfile for Frontend:-Inside your project directory, create a Dockerfile for the frontend application:

# frontend/Dockerfile
FROM node:14-alpine

WORKDIR /app

COPY package*.json ./

RUN npm install

COPY . .

EXPOSE 3000

CMD ["npm", "start"]

(3)Create Dockerfile for Backend:Similarly, create a Dockerfile for the backend API:

# backend/Dockerfile
FROM node:14-alpine

WORKDIR /app

COPY package*.json ./

RUN npm install

COPY . .

EXPOSE 8080

CMD ["npm", "start"]


(4)Create Dockerfile for Database:
For the database container, you can use an existing database image. For example, for a simple setup, you can use the official MySQL image:

# database/Dockerfile
FROM mysql:latest

ENV MYSQL_ROOT_PASSWORD=root
ENV MYSQL_DATABASE=mydatabase
ENV MYSQL_USER=myuser
ENV MYSQL_PASSWORD=mypassword

root@Dockerhost:~/multi-container-app# ls
docker-compose.yml  Dockerfile  Techdome-backend  Techdome-frontend
root@Dockerhost:~/multi-container-app# cat Dockerfile
#frontend/Dockerfile
FROM node:14-alpine

WORKDIR /app

COPY package*.json /root/multi-container-app/Techdome-frontend

RUN npm install

COPY . .

EXPOSE 3000

CMD ["npm", "start"]

# backend/Dockerfile
FROM node:14-alpine

WORKDIR /app

COPY package*.json /root/multi-container-app/Techdome-backend

RUN npm install

COPY . .

EXPOSE 8080

CMD ["npm", "start"]

# database/Dockerfile
FROM mysql:latest

ENV MYSQL_ROOT_PASSWORD=root
ENV MYSQL_DATABASE=mydatabase
ENV MYSQL_USER=myuser
ENV MYSQL_PASSWORD=mypassword

(5)Create Docker Compose YAML File:
Now, create a docker-compose.yml file in the project root to define and orchestrate the services:
root@Dockerhost:~/multi-container-app# cat docker-compose.yml

services:
  frontend:
    build:
      context: ./
    ports:
      - "3000:3000"
    depends_on:
      - backend

  backend:
    build:
      context: ./
    ports:
      - "8080:8080"
    depends_on:
      - database

  database:
    build:
      context: ./
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: mydatabase
      MYSQL_USER: myuser
      MYSQL_PASSWORD: mypassword

root@Dockerhost:~/multi-container-app# docker-compose up -d
root@Dockerhost:~/multi-container-app# docker images
REPOSITORY                     TAG       IMAGE ID       CREATED       SIZE
multi-container-app-backend    latest    d1d2958b54b4   4 weeks ago   619MB
multi-container-app-frontend   latest    b232bd363e2b   4 weeks ago   619MB
multi-container-app-database   latest    a12af21a9577   4 weeks ago   619MB
root@Dockerhost:~/multi-container-app# docker compose ps
NAME                             IMAGE                          COMMAND                         SERVICE    CREATED          STATUS          PORTS
multi-container-app-backend-1    multi-container-app-backend    "docker-entrypoint.sh mysqld"   backend    12 minutes ago   Up 12 minutes   3306/tcp, 33060/tcp, 0.0.0.0:8080->8080/tcp, :::8080->8080/tcp
multi-container-app-database-1   multi-container-app-database   "docker-entrypoint.sh mysqld"   database   12 minutes ago   Up 12 minutes   0.0.0.0:3306->3306/tcp, :::3306->3306/tcp, 33060/tcp
multi-container-app-frontend-1   multi-container-app-frontend   "docker-entrypoint.sh mysqld"   frontend   12 minutes ago   Up 12 minutes   3306/tcp, 0.0.0.0:3000->3000/tcp, :::3000->3000/tcp, 33060/tcp

(6)Initialize Database:-
If you are using MySQL, make sure to create the init.sql file in the database directory:

-- init.sql
CREATE TABLE IF NOT EXISTS mytable (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(255) NOT NULL
);

(7)Run the Application:-Build and run the multi-container application using Docker Compose:
root@Dockerhost:~/multi-container-app# docker-compose up --build

This command will build the images and start the containers.

(8)Access the Application:-
Once the containers are up and running, you can access the frontend application at http://localhost:3000 and the backend API at http://localhost:8080. The 
database will be available on localhost:3306.



                                                   #Application Functionality:-##
Assuming you have a web application with a frontend, backend, and a database, here's a brief overview of how you might interact with the application:

1.Frontend:
->Access the frontend web application using a web browser at the provided IP or localhost address.
->Interact with the user interface, which could be a dashboard, forms, or any other client-side functionality.

2.Backend:
->The frontend interacts with the backend API. This could involve making HTTP requests to the backend services.
->The backend processes requests, handles business logic, and communicates with the database.

3.Database:
->The database stores and retrieves data based on requests from the backend.
->For example, if your application has a form to submit user data, the backend might store that data in the database.

#Deployment Strategy:
The deployment strategy involves using Docker and Kubernetes to containerize and orchestrate the application. Here's an explanation of the key 
steps in the deployment strategy outlined in the previous responses:

1.Docker Compose:
->Docker Compose is used to define the application's multi-container setup.
->Separate Dockerfiles are created for the frontend, backend, and database.
->The docker-compose.yml file specifies the services, builds the Docker images, and orchestrates the containers.

2.Local Kubernetes Deployment:
->Minikube or Docker Desktop's Kubernetes support is used to create a local Kubernetes cluster.
->Docker images are built and loaded into the local Kubernetes cluster.
->A Kubernetes manifest file (e.g., kubernetes-manifests.yaml) is used to define Kubernetes resources such as Services and Deployments.
->The kubectl apply command is used to apply the Kubernetes manifest, creating the specified resources.

3.Accessing the Application:
->Services are configured to expose the necessary ports (e.g., frontend on port 80).
->For Minikube, you might use minikube service frontend to get the external IP and access the application.
->For Docker Desktop, the service should be accessible at the specified ports (e.g., http://localhost:80 for the frontend).

4.Deployment Cleanup:
->The docker-compose down or kubectl delete commands are used to tear down the deployed containers and services.

5.Adjustments and Customization:
->Docker Compose and Kubernetes configurations can be adjusted based on application requirements.
->You might need to modify environment variables, volumes, or service configurations.

The deployment strategy aims to create a reproducible and manageable environment for your application, making it easy to develop, test, and 
deploy in a consistent manner. It leverages containerization for isolation and scalability and uses orchestrators like Docker Compose and 
Kubernetes for managing the application's lifecycle. 


